// APIError implements the StatusCode, MarshalJSON, Unwrap, and Error
// methods and is intended to be used as a return from service methods
// when a non 500 return code is needed
type APIError struct {
     Code int `json:"code,omitempty"`
     Message string `json:"message,omitempty"`
     err error
}

// Error returns a new APIError with the code and message indicated
func Error(code int, message string) error {
     return APIError{Code: code, Message: message}
}

// Errorf returns a new APIError with the code and message derived
// from the format string and arguments
func Errorf(code int, format string, args ...interface{}) error {
     return APIError{Code: code, Message: fmt.Sprintf(format, args...)}
}

func (err APIError) Error() string {
     if err.err != nil {
        return fmt.Sprintf("[%d] %s: %s", err.Code, err.Message, err.err)
     }
     return fmt.Sprintf("[%d] %s", err.Code, err.Message)
}

func (err APIError) StatusCode() int {
     return err.Code
}

func (err APIError) MarshalJSON() ([]byte, error) {
     var message string
     if err.err != nil {
        message = fmt.Sprintf("%s: %s", err.Message, err.err)
     } else {
       message = err.Message
     }
     return []byte(fmt.Sprintf(`{"error": "%s"}`, message)), nil
}

func (err APIError) Wrap(towrap error) error {
     err.err = towrap
     return err
}

func (err APIError) Unwrap() error {
     return err.err
}

{{range .Types}}
{{ with .Schema.Description }}{{ . }}{{ else }}// {{.TypeName}} defines model for {{.JsonName}}.{{ end }}
type {{.TypeName}} {{if and (opts.AliasTypes) (.CanAlias)}}={{end}} {{.Schema.TypeDecl}}
{{end}}
