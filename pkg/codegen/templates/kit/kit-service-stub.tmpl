func New(logger kitlog.Logger) api.Service {
	return &service{
		logger: kitlog.With(logger, "subsystem", "service"),
	}
}

type service struct {
	logger kitlog.Logger
}

func (svc service) methodLogger(name string) kitlog.Logger {
	return kitlog.With(svc.logger, "method", name)
}


{{range . -}}
{{.SummaryAsComment}}
func (svc service) {{.OperationId}}(ctx context.Context

{{- if .HasBody -}}

{{range $index, $body := .Bodies -}}

{{- if eq $index 0 -}}
, data api.{{$body.Schema.GoType}}
{{- end -}}

{{- end -}}

{{- else -}}

{{range $index, $param := .AllParams -}}
, {{- $param.ParamName}} {{if not $param.Required}}*{{end}}
{{- if not (or
	(eq "int" $param.Schema.GoType)
	(eq "float64" $param.Schema.GoType)
	(eq "string" $param.Schema.GoType)
	(eq "bool" $param.Schema.GoType)) -}}
api.
{{- end -}}
{{$param.Schema.GoType -}}
{{- end -}}

{{- end -}}

) {{ if not .GetResponseTypeDefinitions}} error {{else -}}
( 
{{- range $index, $return := .GetResponseTypeDefinitions -}}
{{- if $index }}, {{end -}}
*api.{{ $return.Schema.GoType }}
{{- end -}}
, error)
{{- end }} {
{{- if eq .OperationId "HealthCheck" }}
// any health checking of the service goes here, like checking a
// database connection
   return nil
{{- else }}
	svc.logger.Log("msg", "this service method must be implemented")
{{- if not .GetResponseTypeDefinitions }}
   return api.Error(http.StatusNotImplemented, "not implemented")
{{- else }}
   return nil, api.Error(http.StatusNotImplemented, "not implemented")
{{- end }}
{{- end }}
}
{{end}}
