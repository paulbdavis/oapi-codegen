type Logger interface {
	kitlog.Logger
	With(kvs ...interface{}) Logger
	Msgf(format string, args ...interface{}) error
	Msg(msg string, kvs ...interface{}) error
	Ctx(context.Context) context.Context
}

type contextKeyLogger string

const contextKeyLoggerKVs contextKeyLogger = "oapigen-logger-kvs"
const contextKeyLoggerServiceNames contextKeyLogger = "oapigen-logger-service-name"

// NewJSONLogger makes a new JSON logger compatible with api.Logger using kitlog.NewSyncWriter(os.Stdout)
func NewJSONLogger(serviceName string, kvs ...interface{}) Logger {
	return NewLogger(kitlog.NewJSONLogger(kitlog.NewSyncWriter(os.Stdout)), serviceName, kvs...)
}

// NewLogger makes a new logger compatible with api.Logger
func NewLogger(kitlogger kitlog.Logger, serviceName string, kvs ...interface{}) Logger {
	kvs = append(kvs,
		"service", serviceName,
		"time", kitlog.DefaultTimestampUTC,
	)

	if hostname, ok := os.LookupEnv("HOSTNAME"); ok {
		kvs = append(kvs,
			"hostname", hostname)
	}

	if podname, ok := os.LookupEnv("PODNAME"); ok {
		kvs = append(kvs,
			"podname", podname)
	}

	kitlogger = kitlog.With(kitlogger, kvs...)

	return logger{
		logger: kitlogger,
		kvs:    kvs,
	}
}

func ContextLog(ctx context.Context) Logger {
	ctxVal := ctx.Value(contextKeyLoggerKVs)

	var (
		kvs []interface{}
		ok  bool
	)
	if kvs, ok = ctxVal.([]interface{}); !ok {
		kvs = []interface{}{}
	}

	kitlogger := kitlog.NewJSONLogger(kitlog.NewSyncWriter(os.Stdout))

	return logger{
		logger: kitlog.With(kitlogger, kvs...),
		kvs:    kvs,
	}

}

type logger struct {
	logger kitlog.Logger
	kvs    []interface{}
}

func (lg logger) Ctx(ctx context.Context) context.Context {
	return context.WithValue(ctx, contextKeyLoggerKVs, lg.kvs)
}

func (lg logger) Log(kvs ...interface{}) error {
	return lg.logger.Log(kvs...)
}

func (lg logger) With(kvs ...interface{}) Logger {

	return logger{
		logger: kitlog.With(lg.logger, kvs...),
		kvs:    append(lg.kvs, kvs...),
	}
}

func (lg logger) Msgf(format string, args ...interface{}) error {
	if len(args) > 0 {
		if err, ok := args[len(args)-1].(error); ok {
			return lg.logger.Log("msg", fmt.Sprintf(format, args[:len(args)-1]...), "error", err)
		}
	}
	return lg.logger.Log("msg", fmt.Sprintf(format, args...))
}

func (lg logger) Msg(msg string, kvs ...interface{}) error {
	args := []interface{}{"msg", msg}

	lenKV := len(kvs)
	if lenKV%2 == 1 {
		if err, ok := kvs[lenKV-1].(error); ok {
			args = append(args, kvs[:lenKV-1]...)
			args = append(args, "error", err)
		} else {
			args = append(args, kvs...)
		}
	} else {
		args = append(args, kvs...)
	}

	return lg.logger.Log(args...)
}
