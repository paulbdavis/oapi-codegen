func WithTracingMiddleware(serviceName, zipkinURL string, next Service) Service {

	 reporter := httpreporter.NewReporter(zipkinURL)
	 localEndpoint, _ := zipkin.NewEndpoint(serviceName, ":0")
	 exporter := oczipkin.NewExporter(reporter, localEndpoint)
	 
	 trace.ApplyConfig(trace.Config{DefaultSampler: trace.AlwaysSample()})
	 trace.RegisterExporter(exporter)
	 
	 return tracingMiddleware{next}
}

type tracingMiddleware struct {
	next           Service
}

{{range . -}}{{$opid := .OperationId}}

func (mw tracingMiddleware) {{$opid}}(ctx context.Context

{{- if .HasBody -}}

{{range $index, $body := .Bodies -}}

{{- if eq $index 0 -}}
, data {{$body.Schema.GoType}}
{{- end -}}

{{- end -}}

{{- else -}}

{{range $index, $param := .AllParams -}}
, {{- $param.ParamName}} {{if not $param.Required}}*{{end}}{{$param.Schema.GoType -}}
{{- end -}}

{{- end -}}

) {{ if not .GetResponseTypeDefinitions}} error { {{else -}}
( 
{{- range $index, $return := .GetResponseTypeDefinitions -}}
{{- if $index }}, {{end -}}
{{ $return.Schema.GoType }}
{{- end -}}
, error) {
{{- end }}
	var (
		span *trace.Span
		err error
	)
	ctx, span = trace.StartSpan(ctx, "{{$opid}}")
	defer span.End()

{{ if not .GetResponseTypeDefinitions }}

{{ if .HasBody }}
	err = mw.next.{{$opid}}(ctx, data)
{{ else }}

	err = mw.next.{{$opid}}(ctx, {{range $index, $param := .AllParams -}}
{{if $index}}, {{end -}}
{{- $param.ParamName -}}
{{- end -}})

{{ end }}
	return err

{{else if .AllParams }}

	output, err := mw.next.{{$opid}}(ctx, {{range $index, $param := .AllParams -}}
{{if $index}}, {{end -}}
{{- $param.ParamName -}}
{{- end -}})

	return output, err
	
{{ else if .HasBody }}

	output, err := mw.next.{{$opid}}(ctx, data)

	return output, err
	
{{end}}

}
{{end}}
